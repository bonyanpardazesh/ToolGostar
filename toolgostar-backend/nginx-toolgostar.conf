# Nginx Configuration for ToolGostar.com
# Place this file in: /etc/nginx/sites-available/toolgostar.com
# Create symlink: sudo ln -s /etc/nginx/sites-available/toolgostar.com /etc/nginx/sites-enabled/

server {
    listen 80;
    listen [::]:80;
    server_name toolgostar.com www.toolgostar.com;

    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name toolgostar.com www.toolgostar.com;

    # SSL Certificate Configuration
    # Update these paths with your SSL certificate locations
    ssl_certificate /etc/ssl/certs/toolgostar.com.crt;
    ssl_certificate_key /etc/ssl/private/toolgostar.com.key;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Root directory for frontend
    root /var/www/toolgostar.com;
    index index.html;

    # Logs
    access_log /var/log/nginx/toolgostar-access.log;
    error_log /var/log/nginx/toolgostar-error.log;

    # Maximum upload size
    client_max_body_size 50M;

    # API Proxy - Forward /api/v1 to Node.js backend on port 3001
    location /api/v1 {
        proxy_pass http://localhost:3001/api/v1;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # CORS headers (handled by backend, but can be added here as backup)
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials "true" always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain charset=UTF-8';
            add_header Content-Length 0;
            return 204;
        }
    }

    # Admin Panel - Serve from toolgostar-admin directory
    location /toolgostar-admin {
        alias /var/www/toolgostar.com/toolgostar-admin;
        try_files $uri $uri/ /toolgostar-admin/index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # Static file serving with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|pdf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Frontend - Serve HTML files
    location / {
        try_files $uri $uri/ /index.html;
        
        # Disable caching for HTML files
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        }
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to sensitive files
    location ~ /\.(git|env|htaccess) {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# Optional: Redirect www to non-www (or vice versa)
# Uncomment if you want to enforce non-www
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name www.toolgostar.com;
#
#     ssl_certificate /etc/ssl/certs/toolgostar.com.crt;
#     ssl_certificate_key /etc/ssl/private/toolgostar.com.key;
#
#     return 301 https://toolgostar.com$request_uri;
# }
